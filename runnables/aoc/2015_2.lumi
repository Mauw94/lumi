include fileio

fn solve_part_one() {
    lines -> read_file_lines("test_files/aoc/2.txt")
    total: int -> 0

    foreach lines as line {
        numbers -> line.split("x")
        length -> parse_int(numbers[0])
        width -> parse_int(numbers[1])
        height -> parse_int(numbers[2])

        side_one: int
        side_two: int
        side_three: int
        surfaceArea: int
        smallest: int
        side_one = length * width
        side_two = width * height
        side_three = height * length
        surfaceArea = 2 * length * width + 2 * width * height + 2 * height * length
        smallest = find_smallest_side(side_one, side_two, side_three)
        
        total = total + surfaceArea + smallest
    }   

    print total
}

fn solve_part_two() {
    lines -> read_file_lines("test_files/aoc/2.txt")
    total: int -> 0

    foreach lines as line {
        numbers -> line.split("x")
        length -> parse_int(numbers[0])
        width -> parse_int(numbers[1])
        height -> parse_int(numbers[2])

        values: list -> []
        values.push(length)
        values.push(width)
        values.push(height)

        values_ordered -> values.order_by()
        smallest_two -> values_ordered.take(2)

        ribbon: int
        ribbon = smallest_two[0] + smallest_two[0] + smallest_two[1] + smallest_two[1]
        bow: int
        bow = length * width * height

        total = total + ribbon + bow
    }

    print total
}

fn find_smallest_side(side_one, side_two, side_three) {
    smallest: int

    if (side_one < side_two and side_one < side_three) {
        smallest = side_one
    } else if (side_two < side_three) {
        smallest = side_two
    } else {
        smallest = side_three
    }

    return smallest
}

solve_part_one()
solve_part_two()